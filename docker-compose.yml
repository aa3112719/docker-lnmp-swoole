version: '3'

networks: 
    frontend:
        driver: ${NETWORKS_DRIVER}
    backend:
        driver: ${NETWORKS_DRIVER}
    # default:
    #     ipam:
    #         config:
    #             - subnet: 10.1.0.0/16

services:
    go-gin:
        build:
            context: ./go-gin
            dockerfile: Dockerfile
        container_name: go-gin
        ports:
            - 20201:20201
        working_dir: ${CONTAINER_WWWROOT}/mh_go
        volumes:
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        networks:
            - backend
        command: ["bash", "-c", "./mh_go"]
    nginx:
        restart: always
        build: ./nginx
        container_name: nginx
        ports:
            - 80:80
            - 443:443
        volumes: 
            - ./nginx/sites:/etc/nginx/conf.d
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        command: [nginx-debug, '-g', 'daemon off;']
        depends_on: 
            - php7.4-fpm
            - go-gin
            - php7.2-fpm
        links: 
            - php7.4-fpm
            - go-gin
            - php7.2-fpm
        networks: 
            - frontend
            - backend
    php7.4-fpm:
        build: 
            context: ./php7.4-fpm 
            args:
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
                - INSTSLL_PDO_MYSQL=${PHP_FPM_INSTSLL_PDO_MYSQL}
        container_name: php7.4-fpm
        restart: always
        working_dir: ${CONTAINER_WWWROOT}
        ports:
            - 9000:9000
        volumes: 
            - ./php7.4-fpm/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        networks: 
            - backend
    php7.2-fpm:
        build: 
            context: ./php7.2-fpm 
            args:
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
                - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
                - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
                - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
                - INSTSLL_PDO_MYSQL=${PHP_FPM_INSTSLL_PDO_MYSQL}
        container_name: php7.2-fpm
        restart: always
        working_dir: ${CONTAINER_WWWROOT}
        ports:
            - 8182:8182
        volumes: 
            - ./php7.2-fpm/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ./php7.2-fpm/php-fpm.d/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
            - ./php7.2-fpm/php.ini:/usr/local/etc/php/php.ini
            - ./php7.2-fpm/php-fpm.conf:/usr/local/etc/php-fpm.conf
            - ${WWWROOT}:${CONTAINER_WWWROOT}
        networks: 
            - backend
    # postgres:
    #     build:
    #         context: ./postgresql
    #     container_name: xybdiy_postgres
    #     restart: always
    #     environment:
    #         POSTGRES_USER: root
    #         POSTGRES_PASSWORD: root
    #     ports:
    #         - 5432:5432
    #     volumes:
    #         - ./postgresql/data:/var/lib/postgresql/data
    mongo:
        build:
            context: ./mongo
        container_name: mongo27017
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: root
        ports:
            - "27017:27017"
        volumes:
            - ./mongo/data:/data/db
        networks: 
            - frontend
            - backend
    # php7.1-fpm:
    #     build: 
    #         context: ./php7.1-fpm 
    #         args:
    #             - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
    #             - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
    #             - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
    #             - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
    #             - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
    #             - INSTSLL_PDO_MYSQL=${PHP_FPM_INSTSLL_PDO_MYSQL}
    #     container_name: php7.4-fpm
    #     restart: always
    #     working_dir: ${CONTAINER_WWWROOT}
    #     ports:
    #         - 9000:9000
    #     volumes: 
    #         - ./php7.4-fpm/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
    #         - ${WWWROOT}:${CONTAINER_WWWROOT}
    #     networks: 
    #         - backend        
    redis:
        build: ./redis
        container_name: redis
        volumes:
            - ${DATA_PATH}/redis:/data
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - backend
    mysql:
        build:
            context: ./mysql
            args:
            - MYSQL_VERSION=${MYSQL_VERSION}
        container_name: mysql
        command: 
            --innodb-use-native-aio=0 
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - TIMEZONE=${WORKSPACE_TIMEZONE}
        volumes:
            - ${DATA_PATH}/mysql/data:/var/lib/mysql
            - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        ports:
            - ${MYSQL_PORT}:3306
        networks:
            - backend
    # mysql8:
    #     build:
    #         context: ./mysql
    #         args:
    #             - MYSQL_VERSION=8.0.26
    #     container_name: mysql8
    #     command: 
    #         --innodb-use-native-aio=0 
    #     environment:
    #         MYSQL_ROOT_PASSWORD: 123456
    #         MYSQL_DATABASE: "jianmu"
    #         TZ: "Asia/Shanghai"
    #     volumes:
    #         - ${DATA_PATH}/mysql/data:/var/lib/mysql
    #         - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #     ports:
    #         - ${MYSQL_PORT}:3306
    #     networks:
    #         - backend
    # mariadb:
    #     build:
    #         context: ./mariadb
    #         args:
    #         - http_proxy
    #         - https_proxy
    #         - no_proxy
    #         - MARIADB_VERSION=${MARIADB_VERSION}
    #     container_name: mariadb
    #     volumes:
    #         - ${DATA_PATH}/mariadb:/var/lib/mysql
    #         - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    #     ports:
    #         - ${MARIADB_PORT}:3366
    #     environment:
    #         SPRING_PROFILES_ACTIVE: dev
    #         SPRING_DATASOURCE_URL: jdbc:mysql://jianmu-mysql:3306/jianmu?useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
    #         SPRING_DATASOURCE_USERNAME: root
    #         SPRING_DATASOURCE_PASSWORD: 123456
    #         JIANMU_WORKER_SECRET: worker-secret
    #         JIANMU_API_ADMINPASSWD: k9kQdPd5Fw9qmD0ikMiQ
    #     #      REGISTRY_AK:
    #     #      REGISTRY_SK:
    #     volumes:
    #         - ./jianmu/data:/home/jianmu/data
    #     depends_on:
    #         - jianmu-mysql
    #     entrypoint: ["wait-for-it.sh", "jianmu-mysql:3306", "-t", "0", "--", "java", "-Duser.timezone=Asia/Shanghai",  "-jar", "jianmu-server.jar"]
        
    #     networks:
    #         - frontend
    # worker:
    #     image: docker.jianmuhub.com/jianmu/jianmu-worker-docker:v1.0.9
    #     restart: always
    #     environment:
    #         JIANMU_SRV_ADDRESS: http://ci-server:8081
    #         JIANMU_SRV_SECRET: worker-secret
    #         JIANMU_WORKER_ID: worker1
    #         # 可同时并发的容器数量，默认为2
    #         JIANMU_WORKER_CAPACITY: 5
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #     depends_on:
    #         - jianmu-mysql
    #         - ci-server
    #     networks:
    #         - frontend
    # web:
        # image: docker.jianmuhub.com/jianmu/jianmu-ui:v2.7.1
        # ports:
        #     - "9880:80"
        #     # - "98443:443"
        # restart: always
        # depends_on:
        #     - jianmu-mysql
        #     - ci-server
        # networks:
        #     - frontend